from math import gcd
import hashlib

# 已知 N 和 e
N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471
e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085

# p 和 q
p = 332489744659319445056358501309259698661
q = 306551911179032726355326621857231237201

# 计算 φ(N)
phi = (p - 1) * (q - 1)

# 检查 gcd
g = gcd(e, phi)
print("gcd(e, phi) =", g)

# 用扩展欧几里得算法求解 d
def egcd(a, b):
    if b == 0:
        return (1, 0, a)
    else:
        x1, y1, g = egcd(b, a % b)
        return (y1, x1 - (a // b) * y1, g)

x, y, g = egcd(e, phi)
# 确保 x 是正数
d = x % phi

# 计算 flag
flag = "flag{" + hashlib.md5(hex(d).encode()).hexdigest() + "}"

print("d =", d)
print("flag =", flag)
